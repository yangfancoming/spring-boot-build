

package org.springframework.boot.autoconfigure.security;

import org.junit.Before;
import org.junit.Test;

import org.springframework.boot.context.properties.bind.Bindable;
import org.springframework.boot.context.properties.bind.Binder;
import org.springframework.boot.context.properties.source.MapConfigurationPropertySource;

import static org.assertj.core.api.Assertions.assertThat;

/**
 * Tests for {@link SecurityProperties}.
 *
 * @author Dave Syer
 * @author Madhura Bhave
 */
public class SecurityPropertiesTests {

	private SecurityProperties security = new SecurityProperties();

	private Binder binder;

	private MapConfigurationPropertySource source = new MapConfigurationPropertySource();

	@Before
	public void setUp() {
		this.binder = new Binder(this.source);
	}

	@Test
	public void validateDefaultFilterOrderMatchesMetadata() {
		assertThat(this.security.getFilter().getOrder()).isEqualTo(-100);
	}

	@Test
	public void filterOrderShouldBind() {
		this.source.put("spring.security.filter.order", "55");
		this.binder.bind("spring.security", Bindable.ofInstance(this.security));
		assertThat(this.security.getFilter().getOrder()).isEqualTo(55);
	}

	@Test
	public void userWhenNotConfiguredShouldUseDefaultNameAndGeneratedPassword() {
		SecurityProperties.User user = this.security.getUser();
		assertThat(user.getName()).isEqualTo("user");
		assertThat(user.getPassword()).isNotNull();
		assertThat(user.isPasswordGenerated()).isTrue();
		assertThat(user.getRoles()).isEmpty();
	}

	@Test
	public void userShouldBindProperly() {
		this.source.put("spring.security.user.name", "foo");
		this.source.put("spring.security.user.password", "password");
		this.source.put("spring.security.user.roles", "ADMIN,USER");
		this.binder.bind("spring.security", Bindable.ofInstance(this.security));
		SecurityProperties.User user = this.security.getUser();
		assertThat(user.getName()).isEqualTo("foo");
		assertThat(user.getPassword()).isEqualTo("password");
		assertThat(user.isPasswordGenerated()).isFalse();
		assertThat(user.getRoles()).containsExactly("ADMIN", "USER");
	}

	@Test
	public void passwordAutogeneratedIfEmpty() {
		this.source.put("spring.security.user.password", "");
		this.binder.bind("spring.security", Bindable.ofInstance(this.security));
		assertThat(this.security.getUser().isPasswordGenerated()).isTrue();
	}

}
